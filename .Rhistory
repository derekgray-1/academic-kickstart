blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
hugo new  --kind post post/gradopportunities
?hugo
library(hugo)
setwd("C:/Users/dgray/Downloads")
EMRL<-read.csv("EMRL.Ghr.GLP-1.App.csv")
ggplot(data=EMRL, aes(x=as.factor(Time), y=Ghrelin, fill=Phase))
library(ggplot2)
ggplot(data=EMRL, aes(x=as.factor(Time), y=Ghrelin, fill=Phase))
ggplot(data=EMRL, aes(x=as.factor(Time), y=Ghrelin, fill=Phase)) +
geom_histogram()
head(data)
head(EMRL
)
subset(EMRL,EMRL$Time=="Pre")
ggplot(data=EMRL, aes(x=as.factor(Time), y=Ghrelin, fill=Phase)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrlein))
subset(EMRL,EMRL$Time=="Pre")
ggplot(data=EMRL, aes(x=as.factor(Time), y=Ghrelin, fill=Phase)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin, fill=Time)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin, fill=Time)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Post"),aes(x=Ghrelin))
EMRL
ggplot(data=EMRL, aes(x=Ghrelin, fill=Time)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Post"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin), fill=red)+
geom_histogram(data=subset(EMRL,EMRL$Time=="Post"),aes(x=Ghrelin),fill=blue)
ggplot(data=EMRL, aes(x=Ghrelin)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin), fill="red")+
geom_histogram(data=subset(EMRL,EMRL$Time=="Post"),aes(x=Ghrelin),fill="blue")
subset(EMRL,EMRL$Time=="Post")
unique(EMRL$Time)
ggplot(data=EMRL, aes(x=Ghrelin)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin), fill="red")+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin),fill="blue")
ggplot(data=EMRL, aes(x=Ghrelin),fill="Time") +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin), fill="red")+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin),fill="blue")
ggplot(data=EMRL, aes(x=Ghrelin),fill="Time") +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin),colour="Time") +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin),fill=Time) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin,fill=Time)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin))
ggplot(data=EMRL, aes(x=Ghrelin,fill=Time)) +
geom_histogram(data=subset(EMRL,EMRL$Time=="Pre"),aes(x=Ghrelin))+
geom_histogram(data=subset(EMRL,EMRL$Time=="Imm Post"),aes(x=Ghrelin))
xlab("Exercise Time Points")+
ylab("Ghrelin (pg/mL-1)")+
theme(panel.background = element_rect(fill = "lightcyan3", colour = "lightcyan3",size = 0.5, linetype = "solid"),panel.grid.major = element_line(size = 0.5, linetype ='solid', colour = "white"), panel.grid.minor = element_line(size = 0.25, linetype ='solid',colour = "white"), axis.text=element_text(size=12), axis.title=element_text(size=10,face="bold"),legend.title=element_text(size=12), legend.text=element_text(size=10))+
theme(legend.position = c(0.2,0.9))
ggplot(EMRL, aes(x=Ghrelin,fill=Time)) +
geom_histogram(position="identity", colour="grey40", alpha=0.2, bins = 10) +
facet_grid(. ~ Time)
ggplot(EMRL, aes(x=Ghrelin)) +
geom_histogram(position="identity", colour="grey40", alpha=0.2, bins = 10) +
facet_grid(. ~ Time)
install.packages(c("gclus", "lmom"))
setwd("C:/Users/dgray/Downloads")
Project_Data <- read_csv("Project Data.csv")
library(readr)
Project_Data <- read_csv("Project Data.csv")
Location=Project_Data$Location
Lakedata=Project_Data[,3:19]
Lakedata[is.na(Lakedata)]=0
env.pca=rda(Lakedata, scale=TRUE)
library(ade4)
library(vegan)
library(gclus)
library(ape)
library(lmom)
env.pca=rda(Lakedata, scale=TRUE)
summary(env.pca)
plot(env.pca)
Lakedata.stand<-decostand(Lakedata,method="standardize")
head(Lakedata.stand)
Location
head(Project_Data)
Project_data$Lake
Project_Data$Lake
row.names(Lakedata.stand)<-Project_Data$Lake
my.pca<-prcomp(Lakedata.stand)
Lakedata.stand<-decostand(Lakedata,method="standardize")
row.names(Lakedata.stand)<-Project_Data$Lake
my.pca<-prcomp(Lakedata.stand)
library(factoextra)
fviz_pca_biplot(my.pca,habillage=Location)
fviz_pca_biplot(my.pca,habillage=Location,invisible="quali")
library(ggsci)
fviz_pca_biplot(my.pca,habillage=Location,palette="simpsons",invisible="quali")
fviz_pca_biplot(my.pca,habillage=Location,palette="rickandmorty",invisible="quali")
fviz_pca_biplot(my.pca,habillage=Location,palette="aaas",invisible="quali")
fviz_pca_biplot(my.pca,habillage=Location,palette=c("red","black"),invisible="quali")
fviz_pca_biplot(my.pca,habillage=Location,palette=c("red","black","orange"),invisible="quali")
fviz_pca_biplot(my.pca,habillage=Location,palette=c("red","black"),invisible="quali")
blogdown:::serve_site()
blogdown:::serve_site()
setwd("C:/Users/dgray/Downloads")
Project_Data <- read_csv("Project Data.csv")
library(ade4)
library(vegan)
library(gclus)
library(ape)
library(lmom)
library(readr)
Project_Data <- read_csv("Project Data.csv")
Location=Project_Data$Location
Lakedata=Project_Data[,3:19]
Lakedata[is.na(Lakedata)]=0
Lakedata.stand<-decostand(Lakedata,method="standardize")
row.names(Lakedata.stand)<-Project_Data$Lake
my.pca<-prcomp(Lakedata.stand)
NMDS=metaMDS(Lakedata,distance='bray',k=2)
plot(NMDS)
ordispider(NMDS,groups=Location,label=TRUE,co=c("red","blue"))
#DCA to test axis lengths
decorana(Lakedata.stand)
Lakedata.stand
rowSums(Lakedata.stnad)
rowSums(Lakedata.stand)
#DCA to test axis lengths
decorana(Lakedata)
blogdown:::serve_site()
blogdown:::serve_site()
